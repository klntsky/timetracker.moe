// package.json
```
{
  "name": "harvest-clone",
  "version": "0.3.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "uuid": "^9.0.1",
    "clsx": "^2.1.0",
    "bootstrap": "^5.3.3",
    "@fortawesome/fontawesome-free": "^6.5.2"
  },
  "devDependencies": {
    "@types/react": "^18.3.0",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.2.0",
    "typescript": "^5.5.0",
    "vite": "^5.2.0"
  }
}
```

// index.html
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Harvest Clone</title>
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/node_modules/@fortawesome/fontawesome-free/css/all.min.css" />
  </head>
  <body class="bg-light">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

// src/index.css
```
/* override / tweaks on top of bootstrap */
.week-grid { display: grid; grid-template-columns: 200px repeat(7, 1fr); gap: .5rem; }
.week-grid .header { font-weight: 600; text-align: center; }
.week-grid .cell { min-height: 48px; border: 1px solid #dee2e6; padding: .25rem; background: #fff; font-size: .875rem; position: relative; }
.ellipsis-btn { border: none; background: transparent; color: #6c757d; cursor: pointer; }
.ellipsis-btn:hover { color: #000; }
```

// src/components/TopBar.tsx
```
import React from 'react';
import { Project, TimeEntry } from '../types';
import clsx from 'clsx';

interface Props {
  tabs: { id: string; label: string }[];
  current: string;
  changeTab: (id: string) => void;
  activeEntry: TimeEntry | null;
  isRunning: boolean;
  toggleTimer: () => void;
  elapsedMs: number;
}

export default function TopBar({ tabs, current, changeTab, activeEntry, isRunning, toggleTimer, elapsedMs }: Props) {
  const hrs = Math.floor(elapsedMs / 3600000)
    .toString()
    .padStart(2, '0');
  const mins = Math.floor((elapsedMs % 3600000) / 60000)
    .toString()
    .padStart(2, '0');
  const secs = Math.floor((elapsedMs % 60000) / 1000)
    .toString()
    .padStart(2, '0');

  return (
    <header className="d-flex align-items-center border-bottom p-2 bg-white gap-3">
      <button
        className={clsx('btn', isRunning ? 'btn-danger' : 'btn-success', 'd-flex align-items-center gap-2')}
        onClick={toggleTimer}
      >
        <i className={clsx('fas', isRunning ? 'fa-circle' : 'fa-play')}></i>
        {isRunning ? 'Pause' : 'Start'}
      </button>
      {activeEntry ? (
        <span className="fw-semibold text-nowrap">
          {hrs}:{mins}:{secs}
        </span>
      ) : (
        <span>No active entry</span>
      )}
      <nav className="ms-auto d-flex gap-2">
        {tabs.map((t) => (
          <button
            key={t.id}
            className={clsx('btn btn-link text-decoration-none', current === t.id && 'fw-bold')}
            onClick={() => changeTab(t.id)}
          >
            {t.label}
          </button>
        ))}
      </nav>
    </header>
  );
}
```

// src/components/TrackTab.tsx
```
import React, { useState } from 'react';
import { Project, TimeEntry, Settings } from '../types';

interface Props {
  projects: Project[];
  entries: TimeEntry[];
  settings: Settings;
  addProject: () => void;
  renameProject: (id: string) => void;
  deleteProject: (id: string) => void;
  deleteEntry: (id: string) => void;
  changeEntryProject: (id: string, pid: string) => void;
  editEntry: (entry: TimeEntry) => void;
  resumeEntry: (entry: TimeEntry) => void;
}

function TrackTabComponent({
  projects,
  entries,
  settings,
  addProject,
  renameProject,
  deleteProject,
  deleteEntry,
  changeEntryProject,
  editEntry,
  resumeEntry,
}: Props) {
  const [projectMenu, setProjectMenu] = useState<string | null>(null);
  const [entryMenu, setEntryMenu] = useState<string | null>(null);

  const now = new Date();
  const weekStart = (() => {
    const ws = new Date(now);
    const offset = settings.weekEndsOn === 'sunday' ? 1 : 0;
    const diff = (now.getDay() + 7 - offset) % 7;
    ws.setDate(now.getDate() - diff);
    ws.setHours(0, 0, 0, 0);
    return ws;
  })();
  const days = Array.from({ length: 7 }, (_, i) => {
    const d = new Date(weekStart);
    d.setDate(weekStart.getDate() + i);
    return d;
  });

  const entriesForDay = (projId: string, d: Date) =>
    entries.filter(
      (e) =>
        e.projectId === projId &&
        new Date(e.start) >= d &&
        new Date(e.start) < new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1),
    );

  const formatHours = (entry: TimeEntry) =>
    ((new Date(entry.end).getTime() - new Date(entry.start).getTime()) / 36e5).toFixed(2);

  return (
    <>
      <div className="week-grid">
        <div className="header" />
        {days.map((d) => (
          <div key={d.toDateString()} className="header">
            {d.toLocaleDateString(undefined, { weekday: 'short', month: 'numeric', day: 'numeric' })}
          </div>
        ))}
        {projects.map((p) => (
          <React.Fragment key={p.id}>
            <div className="cell header d-flex justify-content-between align-items-center">
              <span>{p.name}</span>
              <button className="ellipsis-btn" onClick={() => setProjectMenu(projectMenu === p.id ? null : p.id)}>
                <i className="fas fa-ellipsis-v"></i>
              </button>
              {projectMenu === p.id && (
                <div className="dropdown-menu show" style={{ left: 'auto', right: 0 }}>
                  <button className="dropdown-item" onClick={() => { setProjectMenu(null); renameProject(p.id); }}>Edit</button>
                  <button className="dropdown-item" onClick={() => { setProjectMenu(null); deleteProject(p.id); }}>Delete</button>
                </div>
              )}
            </div>
            {days.map((d) => (
              <div key={d.toDateString()} className="cell">
                {entriesForDay(p.id, d).map((e) => (
                  <div key={e.id} className="d-flex justify-content-between align-items-center">
                    <span>{formatHours(e)}</span>
                    <button className="ellipsis-btn" onClick={() => setEntryMenu(entryMenu === e.id ? null : e.id)}>
                      <i className="fas fa-ellipsis-v"></i>
                    </button>
                    {entryMenu === e.id && (
                      <div className="dropdown-menu show" style={{ left: 'auto', right: 0 }}>
                        <button className="dropdown-item" onClick={() => { setEntryMenu(null); resumeEntry(e); }}>Resume</button>
                        <button className="dropdown-item" onClick={() => { setEntryMenu(null); editEntry(e); }}>Edit</button>
                        <button className="dropdown-item" onClick={() => { setEntryMenu(null); deleteEntry(e.id); }}>Delete</button>
                        <div className="dropdown-item">
                          Change project:
                          <select
                            className="form-select form-select-sm mt-1"
                            value={e.projectId}
                            onChange={(ev) => { setEntryMenu(null); changeEntryProject(e.id, ev.target.value); }}
                          >
                            {projects.map((pr) => (
                              <option key={pr.id} value={pr.id}>{pr.name}</option>
                            ))}
                          </select>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ))}
          </React.Fragment>
        ))}
      </div>
      <button className="btn btn-outline-primary mt-3" onClick={addProject}>+ Add project</button>
    </>
  );
}

export default React.memo(TrackTabComponent);
```

// src/App.tsx
```
import React, { useEffect, useMemo, useState } from 'react';
import { v4 as uuid } from 'uuid';
import { useLocalStorage } from './hooks/useLocalStorage';
import { TimeEntry, Project, Settings } from './types';
import TopBar from './components/TopBar';
import TrackTab from './components/TrackTab';
import { PresetRange, getRange } from './utils/dateRanges';

// ─── Timer hook ────────────────────────────────────────────────────────────
function useTimer(initialRunning: boolean, initialStart: string | null) {
  const [running, setRunning] = useState(initialRunning);
  const [startIso, setStartIso] = useState<string | null>(initialStart);
  const [, force] = useState(0);

  useEffect(() => {
    if (!running) return;
    const int = setInterval(() => force((n) => n + 1), 1000);
    return () => clearInterval(int);
  }, [running]);

  const start = () => {
    setRunning(true);
    setStartIso(new Date().toISOString());
  };
  const stop = () => setRunning(false);

  const elapsedMs = running && startIso ? Date.now() - new Date(startIso).getTime() : 0;
  return { running, startIso, start, stop, elapsedMs } as const;
}

// ─── App component ─────────────────────────────────────────────────────────
export default function App() {
  // persistent stores
  const [projects, setProjects] = useLocalStorage<Project[]>('harvest.projects', []);
  const [entries, setEntries] = useLocalStorage<TimeEntry[]>('harvest.entries', []);
  const [settings, setSettings] = useLocalStorage<Settings>('harvest.settings', { weekEndsOn: 'sunday' });

  // ui state
  const [tab, setTab] = useState<'TRACK' | 'REPORTS' | 'SETTINGS' | 'BACKUP'>('TRACK');

  // active (running) entry – one without end
  const activeEntry = useMemo(() => entries.find((e) => !e.end), [entries]);

  // timer persistence
  const [timerStore, setTimerStore] = useLocalStorage<{
    running: boolean;
    start: string | null;
    entryId: string | null;
  }>('harvest.timer', { running: false, start: null, entryId: null });
  const timer = useTimer(timerStore.running, timerStore.start);

  useEffect(() => {
    setTimerStore({ running: timer.running, start: timer.startIso, entryId: timerStore.entryId });
  }, [timer.running, timer.startIso]);

  // ─── Timer control ───────────────────────────────────────────────────────
  const stopEntry = (entryId: string) => {
    setEntries((es) => es.map((e) => (e.id === entryId ? { ...e, end: new Date().toISOString() } : e)));
  };

  const startNewEntry = (projectId: string, resumeId?: string) => {
    const id = resumeId ?? uuid();
    const newEntry: TimeEntry = { id, projectId, start: new Date().toISOString() };
    setEntries((es) => (resumeId ? es.map((e) => (e.id === id ? { ...e, start: newEntry.start, end: undefined } : e)) : [...es, newEntry]));
    setTimerStore({ running: true, start: newEntry.start, entryId: id });
    timer.start();
  };

  const toggleTimer = () => {
    if (timer.running) {
      // stop current entry
      timer.stop();
      if (timerStore.entryId) stopEntry(timerStore.entryId);
      setTimerStore({ running: false, start: null, entryId: null });
    } else {
      // resume last paused entry if exists, else create on first project
      if (timerStore.entryId) {
        startNewEntry(entries.find((e) => e.id === timerStore.entryId)!.projectId, timerStore.entryId);
      } else {
        if (!projects.length) return alert('Create a project first');
        startNewEntry(projects[0].id);
      }
    }
  };

  // ─── Project helpers ─────────────────────────────────────────────────────
  const addProject = () => {
    const name = prompt('Project name?');
    if (!name) return;
    setProjects([...projects, { id: uuid(), name, updatedAt: new Date().toISOString() }]);
  };
  const renameProject = (id: string) => {
    const name = prompt('New name?');
    if (!name) return;
    setProjects(projects.map((p) => (p.id === id ? { ...p, name } : p)));
  };
  const deleteProject = (id: string) => {
    if (!confirm('Delete project and its entries?')) return;
    setProjects(projects.filter((p) => p.id !== id));
    setEntries(entries.filter((e) => e.projectId !== id));
  };

  // ─── Entry helpers for TrackTab ─────────────────────────────────────────--
  const deleteEntry = (id: string) => setEntries(entries.filter((e) => e.id !== id));
  const changeEntryProject = (id: string, pid: string) => setEntries(entries.map((e) => (e.id === id ? { ...e, projectId: pid } : e)));
  const editEntry = (entry: TimeEntry) => {
    const note = prompt('Edit note', entry.note || '');
    if (note === null) return;
    setEntries(entries.map((e) => (e.id === entry.id ? { ...e, note } : e)));
  };
  const resumeEntry = (entry: TimeEntry) => {
    if (timer.running) toggleTimer(); // pause current first
    startNewEntry(entry.projectId, entry.id);
  };

  // ─── Reports Tab ─────────────────────────────────────────────────────────
  const ReportsTab = () => {
    const [preset, setPreset] = useState<PresetRange>('CUSTOM');
    const defaultFrom = new Date(Date.now() - 7 * 24 * 3600 * 1000).toISOString().substring(0, 10);
    const defaultTo = new Date().toISOString().substring(0, 10);
    const [from, setFrom] = useState(defaultFrom);
    const [to, setTo] = useState(defaultTo);
    const [start, end] = getRange(preset, settings, { from, to });

    const filtered = entries.filter((e) => new Date(e.start) >= start && new Date(e.end ?? new Date()) <= end);

    const totals = useMemo(() => {
      const m = new Map<string, number>();
      filtered.forEach((e) => {
        const finish = e.end ? new Date(e.end) : new Date();
        const h = (finish.getTime() - new Date(e.start).getTime()) / 36e5;
        m.set(e.projectId, (m.get(e.projectId) || 0) + h);
      });
      return Array.from(m.entries());
    }, [filtered]);

    const pidToName = (pid: string) => projects.find((p) => p.id === pid)?.name || '???';

    return (
      <div className="card p-3 mt-3">
        <h3>Reports</h3>
        <div className="d-flex align-items-center gap-2 flex-wrap">
          <select className="form-select w-auto" value={preset} onChange={(e) => setPreset(e.target.value as PresetRange)}>
            <option value="THIS_WEEK">This week</option>
            <option value="LAST_WEEK">Last week</option>
            <option value="TWO_WEEKS">Two weeks</option>
            <option value="LAST_TWO_WEEKS">Last two weeks</option>
            <option value="THIS_MONTH">This month</option>
            <option value="LAST_MONTH">Last month</option>
            <option value="CUSTOM">Custom</option>
          </select>
          {preset === 'CUSTOM' && (
            <>
              <input type="date" className="form-control" value={from} onChange={(e) => setFrom(e.target.value)} />
              <input type="date" className="form-control" value={to} onChange={(e) => setTo(e.target.value)} />
            </>
          )}
        </div>
        <table className="table table-sm mt-3">
          <thead>
            <tr><th>Project</th><th className="text-end">Hours</th></tr>
          </thead>
          <tbody>
            {totals.map(([pid, h]) => (
              <tr key={pid}><td>{pidToName(pid)}</td><td className="text-end">{h.toFixed(2)}</td></tr>
            ))}
          </tbody>
        </table>
        <small>
          Period: {start.toLocaleDateString()} – {end.toLocaleDateString()} ({filtered.length} entries)
        </small>
      </div>
    );
  };

  // ─── Settings Tab ────────────────────────────────────────────────────────
  const SettingsTab = () => (
    <div className="card p-3 mt-3">
      <h3>Settings</h3>
      <label className="form-label">
        Week ends on:
        <select className="form-select w-auto d-inline-block ms-2" value={settings.weekEndsOn} onChange={(e) => setSettings({ weekEndsOn: e.target.value as Settings['weekEndsOn'] })}>
          <option value="sunday">Sunday</option>
          <option value="saturday">Saturday</option>
        </select>
      </label>
    </div>
  );

  // ─── Backup Tab ─────────────────────────────────────────────────────────-
  const BackupTab = () => {
    const download = () => {
      const blob = new Blob([JSON.stringify(localStorage, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `harvest-data-${new Date().toISOString()}.json`;
      a.click();
      URL.revokeObjectURL(url);
    };

    const restore = (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = () => {
        try {
          const data = JSON.parse(reader.result as string);
          for (const [k, v] of Object.entries(data)) localStorage.setItem(k, v as string);
          window.location.reload();
        } catch {
          alert('Bad file');
        }
      };
      reader.readAsText(file);
    };

    return (
      <div className="card p-3 mt-3">
        <h3>Backup</h3>
        <button className="btn btn-outline-primary" onClick={download}>Download data</button>
        <input type="file" accept="application/json" onChange={restore} className="form-control d-inline-block w-auto ms-3" />
      </div>
    );
  };

  // ─── Render ──────────────────────────────────────────────────────────────
  return (
    <>
      <TopBar
        tabs={[{ id: 'TRACK', label: 'Time tracking' }, { id: 'REPORTS', label: 'Reports' }, { id: 'SETTINGS', label: 'Settings' }, { id: 'BACKUP', label: 'Backup' }]}
        current={tab}
        changeTab={(id) => setTab(id as any)}
        activeEntry={activeEntry ?? null}
        isRunning={timer.running}
        toggleTimer={toggleTimer}
        elapsedMs={timer.elapsedMs}
      />
      <main className="container-fluid p-3">
        {tab === 'TRACK' && (
          <TrackTab
            projects={projects}
            entries={entries}
            settings={settings}
            addProject={addProject}
            renameProject={renameProject}
            deleteProject={deleteProject}
            deleteEntry={deleteEntry}
            changeEntryProject={changeEntryProject}
            editEntry={editEntry}
            resumeEntry={resumeEntry}
          />
        )}
        {tab === 'REPORTS' && <ReportsTab />}
        {tab === 'SETTINGS' && <SettingsTab />}
        {tab === 'BACKUP' && <BackupTab />}
      </main>
    </>
  );
}
```
